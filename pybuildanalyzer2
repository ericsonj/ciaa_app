#!/usr/bin/env python3

import re
import os
import subprocess
import argparse
from pathlib import Path
import json

# ---------------------

class SectionHeader:
    def __init__(self, args):
        self.nr   = args['nr']
        self.name = args['name']
        self.type = args['type']
        self.addr = int("0x"+args['addr'], 16)
        self.off  = int("0x"+args['off'], 16)
        self.size = int("0x"+args['size'], 16)
        self.es   = args['es']
        self.flg  = args['flg']
        self.lk   = args['lk']
        self.inf  = args['inf']
        self.al   = args['al']
    def __repr__(self) -> str:
        return json.dumps(self.__dict__)

# ----------------------


parser = argparse.ArgumentParser(description='Builder Analyzer for ARM firmware')
parser.add_argument('elf', type=str, help='ELF file')
parser.add_argument('-v', '--version', action='version', version='%(prog)s 2.0.0')
args = parser.parse_args()

cross_compile_prefix = os.environ.get('CROSS_COMPILE', '')
readelf = cross_compile_prefix + 'readelf'

elffile = args.elf
if not Path(elffile).exists():
    print("File {0} not found.".format(elffile))
    exit(-1)

mapfile = elffile.replace(".elf", ".map")
if not Path(mapfile).exists():
    mapfile = None

result = subprocess.run([readelf, '-S', elffile], stdout=subprocess.PIPE).stdout.splitlines()

rgx_section_h = r"^\s*\[[ ]*(?P<nr>[0-9]+)\][ ]+(?P<name>[a-zA-Z\\.0-9_-]+)[ ]+(?P<type>[a-zA-Z\\.0-9_-]+)[ ]+(?P<addr>[a-f0-9]+)[ ]+(?P<off>[a-f0-9]+)[ ]+(?P<size>[a-f0-9]+)[ ]+(?P<es>[a-f0-9]{2})[ ]+(?P<flg>[a-zA-Z]*)[ ]+(?P<lk>[0-9]+)[ ]+(?P<inf>[0-9]+)[ ]+(?P<al>[0-9]+)"
for line in result:
    l = line.decode("utf-8")
    match = re.search(rgx_section_h, l)
    if match:
        s = SectionHeader(match.groupdict())
        print(s)